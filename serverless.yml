service: graphql-dynamodb

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs14.x
  stage: ${opt:stage, 'dev'}
  environment:
    HEROES_TABLE: heroes
    SKILLS_TABLE: skills
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:DescribeTable
      Resource: '*'

package:
  excludeDevDependencies: true
  individually: true

custom:
  dynamodb:
    stages:
      - ${self:provider.stage}
    start:
      migrate: true
      noStart: true
      seed: true

functions:
  graphql:
    handler: handler.handler
    events:
      - http:
          path: /graphql
          method: any
  teste:
    handler: handler.teste

resources:
  Resources:
    heroes:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        TableName: ${self:provider.environment.HEROES_TABLE}
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    skills:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        TableName: ${self:provider.environment.SKILLS_TABLE}
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

plugins:
  - serverless-offline
